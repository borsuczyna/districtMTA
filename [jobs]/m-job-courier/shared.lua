settings = {
    jobStart = Vector3(2136.666, -2288.062, 14.780),
    spawnPositions = {
        {
            vehicle = Vector3(2159.573, -2280.454, 13.546),
            player = Vector3(2136.864, -2257.290, 13.309),
            cart = Vector3(2138.643, -2259.157, 13.300),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2166.933, -2272.841, 13.543),
            player = Vector3(2143.882, -2249.682, 13.304),
            cart = Vector3(2145.563, -2251.360, 13.301),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2174.417, -2265.652, 13.543),
            player = Vector3(2151.021, -2242.256, 13.305),
            cart = Vector3(2152.943, -2244.153, 13.301),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2155.236, -2293.921, 13.568),
            player = Vector3(2149.067, -2280.092, 14.779),
            cart = Vector3(2149.866, -2279.319, 14.779),
            rot = Vector3(0, 0, 135),
        },
        {
            vehicle = Vector3(2157.489, -2296.319, 13.657),
            player = Vector3(2148.171, -2278.708, 14.779),
            cart = Vector3(2149.892, -2277.399, 14.779),
            rot = Vector3(0, 0, 135),
        },
        {
            vehicle = Vector3(2159.939, -2298.678, 13.657),
            player = Vector3(2146.831, -2277.362, 14.780),
            cart = Vector3(2147.896, -2276.308, 14.780),
            rot = Vector3(0, 0, 135),
        },
        {
            vehicle = Vector3(2162.850, -2301.417, 13.746),
            player = Vector3(2142.195, -2262.545, 13.297),
            cart = Vector3(2143.817, -2264.166, 13.299),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2165.712, -2303.906, 13.719),
            player = Vector3(2148.346, -2254.931, 13.296),
            cart = Vector3(2150.773, -2257.386, 13.299),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2169.747, -2307.789, 13.719),
            player = Vector3(2155.463, -2247.488, 13.296),
            cart = Vector3(2158.131, -2249.901, 13.299),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2172.813, -2310.802, 13.719),
            player = Vector3(2162.648, -2239.972, 13.288),
            cart = Vector3(2165.250, -2242.460, 13.288),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2175.556, -2313.270, 13.811),
            player = Vector3(2148.395, -2269.111, 13.309),
            cart = Vector3(2151.598, -2272.361, 13.310),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2177.516, -2318.200, 13.701),
            player = Vector3(2155.809, -2261.817, 13.306),
            cart = Vector3(2158.885, -2264.947, 13.310),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2180.306, -2320.923, 13.701),
            player = Vector3(2163.030, -2254.619, 13.306),
            cart = Vector3(2166.046, -2257.539, 13.303),
            rot = Vector3(0, 0, 225),
        },
        {
            vehicle = Vector3(2182.852, -2323.325, 13.701),
            player = Vector3(2170.297, -2247.326, 13.303),
            cart = Vector3(2173.188, -2250.100, 13.303),
            rot = Vector3(0, 0, 225),
        },

    },
    shelfs = {},
    shelfsPositions = {
        {2138.48, -2251.939, 12.855},
        {2139.53, -2253.042, 12.855},
        {2140.67, -2254.217, 12.855},
        {2141.70, -2255.246, 12.855},
        {2138.48 + 7.25, -2251.939 + 7.4, 12.855},
        {2139.53 + 7.25, -2253.042 + 7.4, 12.855},
        {2140.67 + 7.25, -2254.217 + 7.4, 12.855},
        {2141.70 + 7.25, -2255.246 + 7.4, 12.855},
        {2138.48 + 7.25 * 2, -2251.939 + 7.4 * 2, 12.855},
        {2139.53 + 7.25 * 2, -2253.042 + 7.4 * 2, 12.855},
        {2140.67 + 7.25 * 2, -2254.217 + 7.4 * 2, 12.855},
        {2141.70 + 7.25 * 2, -2255.246 + 7.4 * 2, 12.855},

        {2138.48 + 6.35, -2251.939 - 6.35, 12.855},
        {2139.53 + 6.35, -2253.042 - 6.35, 12.855},
        {2140.67 + 6.35, -2254.217 - 6.35, 12.855},
        {2141.70 + 6.35, -2255.246 - 6.35, 12.855},
        {2138.48 + 6.35 + 7.25, -2251.939 - 6.35 + 7.4, 12.855},
        {2139.53 + 6.35 + 7.25, -2253.042 - 6.35 + 7.4, 12.855},
        {2140.67 + 6.35 + 7.25, -2254.217 - 6.35 + 7.4, 12.855},
        {2141.70 + 6.35 + 7.25, -2255.246 - 6.35 + 7.4, 12.855},
        {2138.48 + 6.35 + 7.25 * 2, -2251.939 - 6.35 + 7.4 * 2, 12.855},
        {2139.53 + 6.35 + 7.25 * 2, -2253.042 - 6.35 + 7.4 * 2, 12.855},
        {2140.67 + 6.35 + 7.25 * 2, -2254.217 - 6.35 + 7.4 * 2, 12.855},
        {2141.70 + 6.35 + 7.25 * 2, -2255.246 - 6.35 + 7.4 * 2, 12.855},

        {2138.48 + 6.35 * 2, -2251.939 - 6.35 * 2, 12.855},
        {2139.53 + 6.35 * 2, -2253.042 - 6.35 * 2, 12.855},
        {2140.67 + 6.35 * 2, -2254.217 - 6.35 * 2, 12.855},
        {2141.70 + 6.35 * 2, -2255.246 - 6.35 * 2, 12.855},
        {2138.48 + 6.35 * 2 + 7.25, -2251.939 - 6.35 * 2 + 7.4, 12.855},
        {2139.53 + 6.35 * 2 + 7.25, -2253.042 - 6.35 * 2 + 7.4, 12.855},
        {2140.67 + 6.35 * 2 + 7.25, -2254.217 - 6.35 * 2 + 7.4, 12.855},
        {2141.70 + 6.35 * 2 + 7.25, -2255.246 - 6.35 * 2 + 7.4, 12.855},
        {2138.48 + 6.35 * 2 + 7.25 * 2, -2251.939 - 6.35 * 2 + 7.4 * 2, 12.855},
        {2139.53 + 6.35 * 2 + 7.25 * 2, -2253.042 - 6.35 * 2 + 7.4 * 2, 12.855},
        {2140.67 + 6.35 * 2 + 7.25 * 2, -2254.217 - 6.35 * 2 + 7.4 * 2, 12.855},
        {2141.70 + 6.35 * 2 + 7.25 * 2, -2255.246 - 6.35 * 2 + 7.4 * 2, 12.855},

        {2138.48 + 6.35 * 2.69, -2251.939 - 6.35 * 2.69, 12.855},
        {2139.53 + 6.35 * 2.69, -2253.042 - 6.35 * 2.69, 12.855},
        {2140.67 + 6.35 * 2.69, -2254.217 - 6.35 * 2.69, 12.855},
        {2141.70 + 6.35 * 2.69, -2255.246 - 6.35 * 2.69, 12.855},
        {2138.48 + 6.35 * 2.69 + 7.25, -2251.939 - 6.35 * 2.69 + 7.4, 12.855},
        {2139.53 + 6.35 * 2.69 + 7.25, -2253.042 - 6.35 * 2.69 + 7.4, 12.855},
        {2140.67 + 6.35 * 2.69 + 7.25, -2254.217 - 6.35 * 2.69 + 7.4, 12.855},
        {2141.70 + 6.35 * 2.69 + 7.25, -2255.246 - 6.35 * 2.69 + 7.4, 12.855},
        {2138.48 + 6.35 * 2.69 + 7.25 * 2, -2251.939 - 6.35 * 2.69 + 7.4 * 2, 12.855},
        {2139.53 + 6.35 * 2.69 + 7.25 * 2, -2253.042 - 6.35 * 2.69 + 7.4 * 2, 12.855},
        {2140.67 + 6.35 * 2.69 + 7.25 * 2, -2254.217 - 6.35 * 2.69 + 7.4 * 2, 12.855},
        {2141.70 + 6.35 * 2.69 + 7.25 * 2, -2255.246 - 6.35 * 2.69 + 7.4 * 2, 12.855},
    },
    packageAttach = {24, 0.12, 0.05, -0.2, -15 - 95, -3, 0},
    cartOffsets = {},
    carOffsets = {},
    packagesMin = 8,
    packagesMax = 14,
    moneyPerPackage = {15, 30},
    upgradePointsPerPackage = {-3, 1},
    peds = {
        {2016.743, -1703.217, 14.147, -0.000, 0.000, 89.841},
        {2015.654, -1717.104, 13.872, -0.000, 0.000, 89.528},
        {2013.582, -1732.569, 14.108, -0.000, 0.000, 90.781},
        {2104.390, -1806.551, 13.555, -0.000, 0.000, 88.925},
        {1937.900, -1911.216, 15.257, -0.000, 0.000, 89.847},
        {1928.576, -1916.288, 15.257, -0.000, 0.000, 181.023},
        {1913.393, -1912.328, 15.257, -0.000, 0.000, 177.553},
        {1891.954, -1914.829, 15.257, -0.000, 0.000, 179.119},
        {1872.261, -1911.975, 15.257, -0.000, 0.000, 179.428},
        {1863.827, -1597.978, 14.306, -0.000, 0.000, 183.459},
        {1909.893, -1598.241, 14.306, -0.000, 0.000, 178.759},
        {2483.390, -1995.776, 13.834, -0.000, 0.000, 180.057},
        {2507.874, -2020.866, 14.210, -0.000, 0.000, 0.200},
        {2465.340, -2020.565, 14.124, -0.000, 0.000, 359.874},
        {2751.845, -1962.876, 13.547, -0.000, 0.000, 266.807},
        {2752.664, -1936.510, 13.273, -0.000, 0.000, 270.590},
        {2786.144, -1926.036, 13.547, -0.000, 0.000, 87.265},
        {2232.108, -1785.676, 13.560, -0.000, 0.000, 89.458},
        {2247.595, -1796.026, 13.547, -0.000, 0.000, 268.663},
        {2307.250, -1785.690, 13.557, -0.000, 0.000, 86.638},
        {2322.272, -1795.997, 13.547, -0.000, 0.000, 268.350},
        {2379.795, -1785.492, 13.547, -0.000, 0.000, 89.458},
        {2402.517, -1713.515, 14.133, -0.000, 0.000, 180.639},
        {2385.349, -1713.057, 14.170, -0.000, 0.000, 180.314},
        {2328.530, -1681.978, 14.821, -0.000, 0.000, 271.483},
        {2308.899, -1715.273, 14.650, -0.000, 0.000, 181.242},
        {2155.645, -1699.542, 15.086, -0.000, 0.000, 180.302},
        {2157.104, -1708.754, 15.086, -0.000, 0.000, 359.194},
        {2139.102, -1698.120, 15.078, -0.000, 0.000, 179.339},
        {2140.544, -1707.388, 15.086, -0.000, 0.000, 358.567},
        {2128.494, -1663.014, 15.086, -0.000, 0.000, 41.808},
        {2140.893, -1652.298, 15.086, -0.000, 0.000, 43.688},
        {2157.986, -1611.896, 14.341, -0.000, 0.000, 159.622},
        {2142.809, -1605.452, 14.352, -0.000, 0.000, 159.936},
        {2150.224, -1286.327, 24.196, -0.000, 0.000, 181.242},
        {2132.310, -1280.866, 25.891, -0.000, 0.000, 180.302},
        {2111.287, -1280.326, 25.688, -0.000, 0.000, 180.929},
        {2090.912, -1279.435, 26.078, -0.000, 0.000, 180.290},
        {2091.273, -1185.316, 27.057, -0.000, 0.000, 91.002},
        {2091.098, -1166.255, 26.586, -0.000, 0.000, 93.822},
        {2094.550, -1145.370, 26.593, -0.000, 0.000, 90.062},
        {2093.772, -1123.623, 27.690, -0.000, 0.000, 90.378},
        {1468.641, -905.084, 54.836, -0.000, 0.000, 1.700},
        {1421.819, -886.070, 50.680, -0.000, 0.000, 356.688},
        {1468.645, -905.382, 54.836, -0.000, 0.000, 358.544},
        {1534.318, -800.162, 72.849, -0.000, 0.000, 86.544},
        {1527.276, -773.247, 80.578, -0.000, 0.000, 136.052},
        {1497.019, -689.007, 95.167, -0.000, 0.000, 182.089},
    }
}

for z = 0, 5 do
    table.insert(settings.cartOffsets, {0.52, 0.23, -.65 + z*0.15})
    table.insert(settings.cartOffsets, {0.52, -0.23, -.65 + z*0.15})
    table.insert(settings.cartOffsets, {1.22, -0.23, -.65 + z*0.15})
    table.insert(settings.cartOffsets, {1.22, 0.23, -.65 + z*0.15})
    table.insert(settings.cartOffsets, {1.92, -0.23, -.65 + z*0.15})
    table.insert(settings.cartOffsets, {1.92, 0.23, -.65 + z*0.15})
end

for z = 0, 5 do
    table.insert(settings.carOffsets, {.4, 0.3, -.3 + z*0.15})
    table.insert(settings.carOffsets, {-.4, 0.3, -.3 + z*0.15})
    table.insert(settings.carOffsets, {.4, -.3, -.3 + z*0.15})
    table.insert(settings.carOffsets, {-.4, -.3, -.3 + z*0.15})
    table.insert(settings.carOffsets, {.4, -.9, -.3 + z*0.15})
    table.insert(settings.carOffsets, {-.4, -.9, -.3 + z*0.15})
end

for z = 1, 4 do
    for _, pos in ipairs(settings.shelfsPositions) do
        local x, y, z = pos[1], pos[2], pos[3] - 0.35 + (z - 1) * 0.72 + (z > 2 and (z > 3 and 0.15 or 0.06) or 0)
        table.insert(settings.shelfs, {x, y, z})
    end
end

function getRandomSpawnPosition()
    return settings.spawnPositions[math.random(1, #settings.spawnPositions)]
end

function getRandomNpcPositions(amount)
    local positions = {}
    local isAdded = function(pos)
        for i, v in ipairs(positions) do
            if v[1] == pos[1] and v[2] == pos[2] then
                return true
            end
        end
        return false
    end

    for i = 1, amount do
        local pos = settings.peds[math.random(1, #settings.peds)]
        while isAdded(pos) do
            pos = settings.peds[math.random(1, #settings.peds)]
        end
        table.insert(positions, pos)
    end

    return positions
end

function isMouseInPosition(x, y, width, height)
    if isCursorShowing() then
        local mx, my = getCursorPosition()
        if not sx or not sy then
            sx, sy = guiGetScreenSize()
        end
        mx, my = mx * sx, my * sy
        return mx >= x and mx <= x + width and my >= y and my <= y + height
    end
    return false
end

function getPointFromDistanceRotation(x, y, dist, angle)
    local a = math.rad(90 - angle);
    local dx = math.cos(a) * dist;
    local dy = math.sin(a) * dist;
    return x+dx, y+dy;
end

function table.find(t, value)
    for k, v in pairs(t) do
        if v == value then
            return k
        end
    end
    return nil
end

function htmlEscape(s)
    return s:gsub('[<>&"]', function(c)
        return c == '<' and '&lt;' or c == '>' and '&gt;' or c == '&' and '&amp;' or '&quot;'
    end)
end